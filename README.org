#+TITLE:     pacr
#+AUTHOR:    Ryan Whittingham
#+EMAIL:     (concat "ryanwhittingham89" at-sign "gmail.com")
#+DESCRIPTION: Generate Arch Linux PKGBUILDs for R packages
#+KEYWORDS:  archlinux, pacman, r
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2 p:t

This script will let you easily generate Arch Linux PKGBUILDs for R
packages available on CRAN.

* Requirements

- Ruby
- =nokogiri=
- R (optional, for determining package dependencies using R's
  =tools::package_dependencies()= function.)

* Usage

Simply run =pacr.rb --pkg cran_pkg= (e.g., =pacr.rb --pkg ggplot2=) to
write an Arch Linux PKGBUILD for a CRAN package and all of its
dependencies (recursively) to new directories. The new directories
will follow Arch Linux package naming guidelines, e.g., =r-ggplot2=.

Optional command-line flags:
- n: Do not generate PKGBUILDs for dependencies recursively.
- f: Overwrite PKGBUILD files that already exist.
- d: Dry run. Just test pacr.rb, but do not actually write any files.

(Example: =pacr.rb -nf --pkg ggplot2=.)

Alternatively, =pacr-pkgbuild.rb cran_pkg= can be used to write a
PKGBUILD of a single package to STDOUT.

The =config.yaml= file contains a list of R packages that should be
filtered out of the =depends= and =optdepends= fields of the PKGBUILD
file. =pacr= will look for this file in the current working directory,
in =~/.config/pacr/config.yaml=, or in =/usr/share/pacr/config.yaml=.
The included =config.yaml= file includes the list of R libraries
installed by default when installing R from the Arch Linux repos.

You may also use the =config.yaml= file to manually override fields of
a PKGBUILD for an R package, as well as to specify a default CRAN
mirror for use with =tools::package_dependencies()=. See =config.yaml=
for more info.
